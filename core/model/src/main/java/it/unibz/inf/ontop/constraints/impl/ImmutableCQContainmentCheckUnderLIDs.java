package it.unibz.inf.ontop.constraints.impl;

import com.google.common.collect.*;
import it.unibz.inf.ontop.constraints.*;
import it.unibz.inf.ontop.model.atom.AtomPredicate;
import it.unibz.inf.ontop.model.atom.DataAtom;
import it.unibz.inf.ontop.model.term.Variable;
import it.unibz.inf.ontop.model.term.VariableOrGroundTerm;

import java.util.*;

public class ImmutableCQContainmentCheckUnderLIDs implements ImmutableCQContainmentCheck {

    private final Map<ImmutableList<DataAtom>, ImmutableSet<DataAtom>> chaseCache = new HashMap<>();

    private final LinearInclusionDependencies<AtomPredicate> dependencies;

    public ImmutableCQContainmentCheckUnderLIDs(LinearInclusionDependencies<AtomPredicate> dependencies) {
        this.dependencies = dependencies;
    }


    @Override
    public boolean isContainedIn(ImmutableCQ cq1, ImmutableCQ cq2) {
        Map<Variable, VariableOrGroundTerm> sb = new HashMap<>();
        // get the substitution for the answer variables first
        // this will ensure that all answer variables are mapped either to constants or
        //       to answer variables in the base (but not to the labelled nulls generated by the chase)
        return ImmutableHomomorphismUtilities.extendHomomorphism(sb, cq2.getAnswerVariables(), cq1.getAnswerVariables())
            && ImmutableHomomorphismUtilities.hasSomeHomomorphism(sb, cq2.getAtoms(), getChase(cq1.getAtoms()));
    }

    private ImmutableSet<DataAtom> getChase(ImmutableList<DataAtom> atoms) {
        ImmutableSet<DataAtom> result = chaseCache.get(atoms);
        if (result == null) {
            result = dependencies.chaseAllAtoms(atoms);
            chaseCache.put(atoms, result);
        }
        return result;
    }
}
