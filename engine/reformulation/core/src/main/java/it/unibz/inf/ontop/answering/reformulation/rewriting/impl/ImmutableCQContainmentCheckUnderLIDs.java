package it.unibz.inf.ontop.answering.reformulation.rewriting.impl;

import com.google.common.collect.*;
import com.google.inject.Inject;
import com.google.inject.assistedinject.Assisted;
import it.unibz.inf.ontop.answering.reformulation.rewriting.ImmutableCQ;
import it.unibz.inf.ontop.answering.reformulation.rewriting.ImmutableCQContainmentCheck;
import it.unibz.inf.ontop.answering.reformulation.rewriting.ImmutableLinearInclusionDependenciesTools;
import it.unibz.inf.ontop.datalog.*;
import it.unibz.inf.ontop.model.atom.AtomPredicate;
import it.unibz.inf.ontop.model.atom.DataAtom;
import it.unibz.inf.ontop.model.term.Variable;
import it.unibz.inf.ontop.model.term.VariableOrGroundTerm;
import it.unibz.inf.ontop.utils.ImmutableCollectors;

import java.util.*;
import java.util.stream.Stream;

public class ImmutableCQContainmentCheckUnderLIDs implements ImmutableCQContainmentCheck {

    private final Map<ImmutableList<DataAtom>, ImmutableSet<DataAtom>> chaseCache = new HashMap<>();

    private final ImmutableList<ImmutableLinearInclusionDependency<AtomPredicate>> dependencies;

    private final ImmutableLinearInclusionDependenciesTools inclusionDependencyTools;

    @Inject
    public ImmutableCQContainmentCheckUnderLIDs(@Assisted ImmutableList<ImmutableLinearInclusionDependency<AtomPredicate>> dependencies,
                                                ImmutableLinearInclusionDependenciesTools inclusionDependencyTools) {
        this.dependencies = dependencies;
        this.inclusionDependencyTools = inclusionDependencyTools;
    }

    @Inject
    public ImmutableCQContainmentCheckUnderLIDs(ImmutableLinearInclusionDependenciesTools inclusionDependencyTools) {
        this.dependencies = null;
        this.inclusionDependencyTools = inclusionDependencyTools;
    }

    @Override
    public boolean isContainedIn(ImmutableCQ cq1, ImmutableCQ cq2) {
        Map<Variable, VariableOrGroundTerm> sb = new HashMap<>();
        // get the substitution for the answer variables first
        // this will ensure that all answer variables are mapped either to constants or
        //       to answer variables in the base (but not to the labelled nulls generated by the chase)
        return ImmutableHomomorphismUtilities.extendHomomorphism(sb, cq2.getAnswerVariables(), cq1.getAnswerVariables())
            && ImmutableHomomorphismUtilities.hasSomeHomomorphism(sb, cq2.getAtoms(), getChase(cq1.getAtoms()));
    }

    private ImmutableSet<DataAtom> getChase(ImmutableList<DataAtom> atoms) {
        ImmutableSet<DataAtom> result = chaseCache.get(atoms);
        if (result == null) {
            result = ((dependencies == null)
                        ? atoms.stream()
                        : Stream.concat(atoms.stream(),
                                atoms.stream()
                                    .flatMap(a -> inclusionDependencyTools.chaseAtom(a, dependencies).stream())))
                    .collect(ImmutableCollectors.toSet());
            chaseCache.put(atoms, result);
        }
        return result;
    }
}
